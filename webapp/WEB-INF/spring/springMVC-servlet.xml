<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

    <task:annotation-driven scheduler="myScheduler"/>
    <task:scheduler id="myScheduler" pool-size="5"/>

    <!--    <mvc:annotation-driven validator="validator" />-->

    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
        <!-- 这里配置将使用上面国际化配置的messageSource
        <property name="validationMessageSource" ref="messageSource" /> -->
    </bean>

    <!--此文件负责整个mvc中的配置-->

    <!--    &lt;!&ndash;启用spring的一些annotation &ndash;&gt;-->
    <!--    有了<context:component-scan>，另一个<context:annotation-config/>标签根本可以移除掉，因为已经被包含进去了-->
    <!--    <context:annotation-config/>-->

    <!-- 配置注解驱动 可以将request参数与绑定到controller参数上 -->
    <mvc:annotation-driven validator="validator">
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="objectMapper">
                    <bean class="com.fasterxml.jackson.databind.ObjectMapper">
                        <!-- 处理responseBody 里面日期类型 -->
                        <!--   <property name="dateFormat">
                              <bean class="java.text.SimpleDateFormat">
                                  <constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss" />
                              </bean>
                          </property>  -->
                        <!-- 为null字段时不显示 -->
                        <!--                        <property name="serializationInclusion">-->
                        <!--                            <value type="com.fasterxml.jackson.annotation.JsonInclude.Include">NON_NULL</value>-->
                        <!--                        </property>-->
                        <property name="propertyNamingStrategy">
                            <!--<bean class="com.xxx.serializer.MyPropertyNamingStrategyBase" />-->
                            <bean class="com.fasterxml.jackson.databind.PropertyNamingStrategy.SnakeCaseStrategy"/>
                        </property>
                    </bean>
                </property>
                <!--                <property name="supportedMediaTypes">-->
                <!--                    <list>-->
                <!--&lt;!&ndash;                        <value>text/html;charset=UTF-8</value>&ndash;&gt;-->
                <!--                        <value>application/json; charset=UTF-8</value>-->
                <!--                    </list>-->
                <!--                </property>-->
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!--静态资源映射-->
    <!--本项目把静态资源放在了webapp的statics目录下，资源映射如下-->
    <mvc:resources mapping="/css/**" location="/WEB-INF/static/css/"/>
    <mvc:resources mapping="/js/**" location="/WEB-INF/static/js/"/>
    <mvc:resources mapping="/image/**" location="/WEB-INF/static/image/"/>

    <!--添加swagger2配置-->
    <!-- API访问地址：http://ip:port/项目名称/swagger-ui.html -->
    <!-- jar包 META-INF目录-->
    <mvc:resources location="classpath:/META-INF/resources/" mapping="swagger-ui.html"/>
    <mvc:resources location="classpath:/META-INF/resources/webjars/" mapping="/webjars/**"/>

    <!-- handleInterceptor -->
    <mvc:interceptors>
        <!--对所有的请求记性拦截-->
        <!--<beans:bean class="com.sunp.common.interceptor.Myinterceptor"/>-->
        <!--对特定的请求进行拦截-->
        <mvc:interceptor>
            <mvc:mapping path="/ycgj/manage/menu"/>
            <mvc:exclude-mapping path="/login"/>
            <bean class="com.bear.springmvctest.common.interceptor.TokenInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀(如果最后一个还是表示文件夹,则最后的斜杠不要漏了) 使用JSP-->
    <!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- -->
    <bean id="defaultViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/view/"/><!--设置JSP文件的目录位置-->
        <property name="suffix" value=".jsp"/>
        <property name="exposeContextBeansAsAttributes" value="true"/>
    </bean>

    <!-- Spring容器注入MethodValidationPostProcessor对象-->
    <bean class="org.springframework.validation.beanvalidation.MethodValidationPostProcessor"/>

    <bean id="personInfo" class="com.bear.springmvctest.component.PersonInfo"></bean>

    <bean id="order" class="com.bear.springmvctest.entity.Order">
        <property name="orderSn" value="20200528001"></property>
    </bean>

    <bean id="autoWiredPropertyController" class="com.bear.springmvctest.controller.AutoWiredPropertyController"
          autowire="byType">
    </bean>
    <bean id="school" class="com.bear.springmvctest.component.School" autowire="byType"></bean>

    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="utf-8"/>
        <property name="maxUploadSize" value="#{5*1024*1024}"/> <!--   SpEl spring表达   -->
    </bean>

    <!-- 自动扫描装配 -->
    <context:component-scan base-package="com.bear.springmvctest.controller">
        <!-- 扫描时跳过 @Controller 注解的JAVA类（控制器） -->
        <!--        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>-->
    </context:component-scan>

<!--    <context:component-scan base-package="com.bear.springmvctest.service.impl"/>-->
    <context:component-scan base-package="com.bear.springmvctest.component"/>
    <context:component-scan base-package="com.bear.springmvctest.entity"/>
    <context:component-scan base-package="com.bear.springmvctest.config"/>
    <!--    <context:component-scan base-package="com.bear.springmvctest.service"/>-->
    <context:component-scan base-package="com.bear.springmvctest.dao"/>
    <context:component-scan base-package="com.bear.springmvctest.util"/>
    <context:component-scan base-package="com.bear.springmvctest.common.interceptor"/>
    <context:component-scan base-package="com.bear.springmvctest.common.exceptions"/>

    <context:mbean-export/>

    <!-- 加载配置属性文件 -->
    <!-- 多个文件加载 -->
    <!--    <context:property-placeholder order="0" location="classpath:application.properties"/>-->
        <context:property-placeholder ignore-unresolvable="true"
                                      location="classpath:jdbc.properties,classpath:application.properties"/>
</beans>